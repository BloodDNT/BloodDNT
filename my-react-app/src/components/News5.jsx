import React, { useContext, useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { UserContext } from '../context/UserContext.jsx';
import axios from 'axios';
import './newpost.css';

export default function BloodDonationTips() {
  const { user, logout } = useContext(UserContext);
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const footerRef = useRef();
  const sectionRefs = useRef({});
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    message: '',
  });
  const [formStatus, setFormStatus] = useState({
    loading: false,
    success: null,
    error: null,
  });

  // H√†m x·ª≠ l√Ω cu·ªôn ƒë·∫øn section khi nh·∫•p v√†o m·ª•c l·ª•c
  const scrollToSection = (id) => {
    sectionRefs.current[id]?.scrollIntoView({ behavior: 'smooth' });
  };

  // Hi·ªáu ·ª©ng fade-in khi cu·ªôn
  useEffect(() => {
    const options = { threshold: 0.1 };
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, options);

    const elements = document.querySelectorAll('.scroll-reveal');
    elements.forEach((el) => observer.observe(el));

    if (footerRef.current) observer.observe(footerRef.current);

    return () => {
      elements.forEach((el) => observer.unobserve(el));
      if (footerRef.current) observer.unobserve(footerRef.current);
    };
  }, []);

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const handleCheck = () => {
    if (!user) {
      navigate('/login');
    } else {
      navigate('/register/request-blood');
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input trong form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setFormStatus({ loading: false, success: null, error: null });
  };

  // X·ª≠ l√Ω g·ª≠i form
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.name || !formData.email || !formData.message) {
      setFormStatus({ loading: false, success: null, error: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß h·ªç t√™n, email v√† tin nh·∫Øn.' });
      return;
    }
    if (!/\S+@\S+\.\S+/.test(formData.email)) {
      setFormStatus({ loading: false, success: null, error: 'Email kh√¥ng h·ª£p l·ªá.' });
      return;
    }

    setFormStatus({ loading: true, success: null, error: null });

    try {
      await axios.post('http://localhost:5000/api/contact', formData);
      setFormStatus({ loading: false, success: 'G·ª≠i li√™n h·ªá th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm.', error: null });
      setFormData({ name: '', email: '', phone: '', message: '' });
    } catch (error) {
      setFormStatus({
        loading: false,
        success: null,
        error: error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i. Vui l√≤ng th·ª≠ l·∫°i.',
      });
    }
  };

  // Danh s√°ch m·ª•c l·ª•c
  const tocItems = [
    { id: 'before-donation', title: 'Tr∆∞·ªõc khi hi·∫øn m√°u' },
    { id: 'after-donation', title: 'Ngay sau khi hi·∫øn m√°u' },
    { id: 'abnormal-symptoms', title: 'Bi·ªÉu hi·ªán b·∫•t th∆∞·ªùng' },
    { id: 'post-donation', title: 'Sau khi r·ªùi ƒëi·ªÉm hi·∫øn m√°u' },
    { id: 'needle-care', title: 'ChƒÉm s√≥c v·ªã tr√≠ ch·ªçc kim' },
    { id: 'contact', title: 'Li√™n h·ªá' },
  ];

  return (
    <>
      <header className="header">
        <div className="logo">
          <Link to="/">
            <img src="/LogoPage.jpg" alt="Hope Donor Logo" loading="lazy" decoding="async" />
          </Link>
          <div className="webname">Hope Donor ü©∏</div>
        </div>
        <nav className="menu">
          <Link to="/bloodguide">Blood Guide</Link>
          <div className="dropdown">
            <Link to="/bloodknowledge" className="dropbtn">Blood</Link>
          </div>
          <Link to="/news">News & Events</Link>
          <Link to="/contact">Contact</Link>
          <Link to="/about">About Us</Link>
        </nav>
        <div className="actions">
          {!user ? (
            <Link to="/login">
              <button className="login-btn">üë§ Login</button>
            </Link>
          ) : (
            <div
              className="dropdown user-menu"
              onMouseEnter={() => setIsOpen(true)}
              onMouseLeave={() => setIsOpen(false)}
            >
              <div className="dropbtn user-name">
                Xin ch√†o, {(user && (user.FullName || user.fullName || user.name)) || 'User'} <span className="ml-2">‚ñº</span>
              </div>
              {isOpen && (
                <div className="dropdown-content user-dropdown">
                  <Link to="/register/request-blood">Register/Request</Link>
                  <Link to="/my-activities">List res/req</Link>
                  <Link to="/history">Donation History</Link>
                  <Link to="/profile">üë§ User Profile</Link>
                  {user?.role === 'Admin' && (
                    <Link to="/dashboard">üõ†Ô∏è Path to admin</Link>
                  )}
                  <Link to="/notifications">üîî Notification</Link>
                  <button className="logout-btn" on Click={handleLogout}>üö™ ƒêƒÉng xu·∫•t</button>
                </div>
              )}
            </div>
          )}
        </div>
      </header>

      <div className="blood-donation-tips p-6">
        <h1 className="text-3xl font-bold mb-6 text-center">L∆∞u √Ω tr∆∞·ªõc v√† sau hi·∫øn m√°u</h1>
        <p className="text-lg text-gray-600 mb-4 text-center">Ng√†y ƒëƒÉng: 13-07-2021</p>
        <img
          src="/nhommau.jpg"
          alt="L∆∞u √Ω hi·∫øn m√°u"
          className="hero-image scroll-reveal"
        />

        {/* M·ª•c l·ª•c */}
        <div className="toc scroll-reveal">
          <h2 className="text-2xl font-semibold mb-4">M·ª•c l·ª•c</h2>
          <ul className="list-disc ml-6">
            {tocItems.map((item) => (
              <li key={item.id} className="text-lg text-blue-600 hover:underline cursor-pointer" onClick={() => scrollToSection(item.id)}>
                {item.title}
              </li>
            ))}
          </ul>
        </div>

        {/* Gi·ªõi thi·ªáu */}
        <section className="intro scroll-reveal" ref={(el) => (sectionRefs.current['intro'] = el)}>
          <p className="text-lg leading-relaxed mb-4">
            Hi·∫øn m√°u l√† h√†nh ƒë·ªông cao ƒë·∫πp, gi√∫p mang ƒë·∫øn m√≥n qu√† s·ª©c kh·ªèe v√¥ gi√° cho ng∆∞·ªùi b·ªánh. Nh·ªØng l∆∞u √Ω d∆∞·ªõi ƒë√¢y s·∫Ω gi√∫p b·∫°n gi·ªØ s·ª©c kh·ªèe v√† y√™n t√¢m h∆°n trong m·ªói l·∫ßn hi·∫øn m√°u.
          </p>
        </section>

        {/* 1. Tr∆∞·ªõc khi hi·∫øn m√°u */}
        <section className="tip-item scroll-reveal" ref={(el) => (sectionRefs.current['before-donation'] = el)}>
          <h2 className="text-2xl font-semibold mb-3">1. Tr∆∞·ªõc khi hi·∫øn m√°u</h2>
          <ul className="list-disc ml-6 text-lg leading-relaxed">
            <li>ƒê√™m tr∆∞·ªõc hi·∫øn m√°u kh√¥ng n√™n th·ª©c qu√° khuya (ng·ªß √≠t nh·∫•t 6 ti·∫øng).</li>
            <li>N√™n ƒÉn nh·∫π, KH√îNG ƒÉn c√°c ƒë·ªì ƒÉn c√≥ nhi·ªÅu ƒë·∫°m, nhi·ªÅu m·ª°.</li>
            <li>KH√îNG u·ªëng r∆∞·ª£u, bia.</li>
            <li>Chu·∫©n b·ªã t√¢m l√Ω th·ª±c s·ª± tho·∫£i m√°i.</li>
            <li>Mang theo gi·∫•y t·ªù t√πy th√¢n (t·ªët nh·∫•t l√† cƒÉn c∆∞·ªõc g·∫Øn chip ho·∫∑c s·ª≠ d·ª•ng VNeID ƒë·ªãnh danh m·ª©c 2).</li>
            <li>U·ªëng nhi·ªÅu n∆∞·ªõc.</li>
          </ul>
        </section>

        {/* 2. Ngay sau khi hi·∫øn m√°u */}
        <section className="tip-item scroll-reveal" ref={(el) => (sectionRefs.current['after-donation'] = el)}>
          <h2 className="text-2xl font-semibold mb-3">2. Ngay sau khi hi·∫øn m√°u</h2>
          <ul className="list-disc ml-6 text-lg leading-relaxed">
            <li>Du·ªói th·∫≥ng, h∆°i n√¢ng cao c√°nh tay trong 15 ph√∫t.</li>
            <li>H·∫°n ch·∫ø g·∫≠p tay trong qu√° tr√¨nh ngh·ªâ sau hi·∫øn m√°u.</li>
            <li>Ngh·ªâ t·∫°i ƒëi·ªÉm hi·∫øn m√°u t·ªëi thi·ªÉu 15 ph√∫t.</li>
            <li>U·ªëng nhi·ªÅu n∆∞·ªõc.</li>
            <li>Ch·ªâ ra v·ªÅ khi c·∫£m th·∫•y th·ª±c s·ª± tho·∫£i m√°i.</li>
            <li>N·∫øu xu·∫•t hi·ªán ch·∫£y m√°u t·ª´ v·∫øt bƒÉng c·∫ßm m√°u:
              <ul className="list-circle ml-6">
                <li>N√¢ng c√°nh tay l√™n v√† ·∫•n nh·∫π v√†o v·∫øt b√¥ng.</li>
                <li>Ng·ªìi xu·ªëng gh·∫ø v√† th√¥ng b√°o cho nh√¢n vi√™n y t·∫ø ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</li>
              </ul>
            </li>
          </ul>
        </section>

        {/* 3. Bi·ªÉu hi·ªán b·∫•t th∆∞·ªùng */}
        <section className="tip-item scroll-reveal" ref={(el) => (sectionRefs.current['abnormal-symptoms'] = el)}>
          <h2 className="text-2xl font-semibold mb-3">3. N·∫øu c√≥ bi·ªÉu hi·ªán b·∫•t th∆∞·ªùng v·ªÅ s·ª©c kh·ªèe</h2>
          <ul className="list-disc ml-6 text-lg leading-relaxed">
            <li>Ngay l·∫≠p t·ª©c ng·ªìi xu·ªëng ho·∫∑c n·∫±m ngay xu·ªëng, t·ªët nh·∫•t l√† n√¢ng cao ch√¢n.</li>
            <li>Gi·ªØ b√¨nh tƒ©nh, h√≠t s√¢u, th·ªü ra ch·∫≠m.</li>
            <li>T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° c·ªßa b·∫•t k·ª≥ ai xung quanh ƒëang ·ªü g·∫ßn ƒë√≥.</li>
            <li>B√°o ngay cho nh√¢n vi√™n y t·∫ø ho·∫∑c t√¨nh nguy·ªán vi√™n.</li>
            <li>Ch·ªâ ng·ªìi d·∫≠y v√† ƒë·ª©ng l√™n khi h·∫øt c·∫£m gi√°c ch√≥ng m·∫∑t, m·ªát m·ªèi.</li>
          </ul>
        </section>

        {/* 4. Sau khi r·ªùi ƒëi·ªÉm hi·∫øn m√°u */}
        <section className="tip-item scroll-reveal" ref={(el) => (sectionRefs.current['post-donation'] = el)}>
          <h2 className="text-2xl font-semibold mb-3">4. Sau khi r·ªùi ƒëi·ªÉm hi·∫øn m√°u</h2>
          <ul className="list-disc ml-6 text-lg leading-relaxed">
            <li>Ti·∫øp t·ª•c u·ªëng nhi·ªÅu n∆∞·ªõc ƒë·ªÉ b·ªï sung l·∫°i th·ªÉ t√≠ch b·ªã m·∫•t khi hi·∫øn m√°u.</li>
            <li>Gi·ªØ ch·∫ø ƒë·ªô ƒÉn u·ªëng, sinh ho·∫°t b√¨nh th∆∞·ªùng; tƒÉng c∆∞·ªùng s·ª≠ d·ª•ng c√°c ch·∫•t dinh d∆∞·ª°ng b·ªï m√°u: th·ªãt, gan, tr·ª©ng, s·ªØa, d√πng th√™m c√°c thu·ªëc b·ªï m√°u n·∫øu c√≥ th·ªÉ.</li>
            <li>Trong v√≤ng 48 ti·∫øng sau hi·∫øn m√°u:
              <ul className="list-circle ml-6">
                <li>Tr√°nh th·ª©c khuya, d√πng c√°c ch·∫•t k√≠ch th√≠ch nh∆∞ r∆∞·ª£u, bia.</li>
                <li>Kh√¥ng h√∫t thu·ªëc l√° trong v√≤ng 4 ti·∫øng.</li>
                <li>Tr√°nh n√¢ng v·∫≠t n·∫∑ng b·∫±ng tay v·ª´a hi·∫øn m√°u.</li>
                <li>Tr√°nh c√°c ho·∫°t ƒë·ªông ƒë√≤i h·ªèi nhi·ªÅu th·ªÉ l·ª±c nh∆∞: thi ƒë·∫•u th·ªÉ thao, ƒë√° b√≥ng, t·∫≠p th·ªÉ h√¨nh, leo tr√®o cao‚Ä¶; ƒë·ªÅ ph√≤ng b·ªã b·∫ßm t√≠m tay v√† ch√≥ng m·∫∑t.</li>
              </ul>
            </li>
          </ul>
        </section>

        {/* 5. ChƒÉm s√≥c v·ªã tr√≠ ch·ªçc kim */}
        <section className="tip-item scroll-reveal" ref={(el) => (sectionRefs.current['needle-care'] = el)}>
          <h2 className="text-2xl font-semibold mb-3">5. ChƒÉm s√≥c v·ªã tr√≠ ch·ªçc kim</h2>
          <ul className="list-disc ml-6 text-lg leading-relaxed">
            <li>BƒÉng c·∫ßm m√°u c·∫ßn ƒë∆∞·ª£c gi·ªØ √≠t nh·∫•t trong 4 ‚Äì 6 gi·ªù.</li>
            <li>Trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p √≠t g·∫∑p, n·∫øu sau khi th√°o bƒÉng, v·∫´n c√≥ m√°u t∆∞∆°i ch·∫£y ra, h√£y ·∫•n nh·∫π tay v√†o v·ªã tr√≠ b√¥ng bƒÉng. ƒê·ªìng th·ªùi n√¢ng cao c√°nh tay 3-5 ph√∫t, sau ƒë√≥ bƒÉng l·∫°i. Gi·ªØ bƒÉng th√™m 6 gi·ªù n·ªØa.</li>
            <li>N·∫øu sau hi·∫øn m√°u, qu√Ω v·ªã th·∫•y xu·∫•t hi·ªán v·∫øt b·∫ßm t√≠m t·∫°i v·ªã tr√≠ l·∫•y m√°u, ƒë·ª´ng qu√° lo l·∫Øng:
              <ul className="list-circle ml-6">
                <li>Trong ng√†y ƒë·∫ßu, c√≥ th·ªÉ d√πng ƒë√° l·∫°nh ch∆∞·ªùm l√™n v·ªã tr√≠ b·ªã b·∫ßm t√≠m.</li>
                <li>Sau 1 ng√†y, chuy·ªÉn sang ch∆∞·ªùm ·∫•m (ch∆∞·ªùm 2-3 l·∫ßn/ng√†y, m·ªói l·∫ßn 10 ph√∫t). V·∫øt b·∫ßm t√≠m th∆∞·ªùng s·∫Ω t·ª± tan v√† bi·∫øn m·∫•t sau 1 tu·∫ßn.</li>
              </ul>
            </li>
          </ul>
        </section>

        {/* Form Li√™n h·ªá */}
        <section className="contact-form scroll-reveal" ref={(el) => (sectionRefs.current['contact'] = el)}>
          <h2 className="text-2xl font-semibold mb-4">Li√™n h·ªá v·ªõi ch√∫ng t√¥i</h2>
          <form onSubmit={handleSubmit} className="contact-form-inner">
            <div className="form-group">
              <label htmlFor="name" className="form-label">H·ªç t√™n</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="form-input"
                placeholder="Nh·∫≠p h·ªç t√™n"
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="email" className="form-label">Email</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className="form-input"
                placeholder="Nh·∫≠p email"
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="phone" className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className="form-input"
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn)"
              />
            </div>
            <div className="form-group">
              <label htmlFor="message" className="form-label">Tin nh·∫Øn</label>
              <textarea
                id="message"
                name="message"
                value={formData.message}
                onChange={handleInputChange}
                className="form-input"
                placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n"
                rows="5"
                required
              ></textarea>
            </div>
            <button type="submit" className="submit-button" disabled={formStatus.loading}>
              {formStatus.loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i li√™n h·ªá'}
            </button>
            {formStatus.success && <p className="form-message success">{formStatus.success}</p>}
            {formStatus.error && <p className="form-message error">{formStatus.error}</p>}
          </form>
        </section>

        {/* CTA */}
        <div className="cta-container scroll-reveal">
          <button className="check-button" onClick={handleCheck}>
            Ki·ªÉm tra ngay
          </button>
        </div>
      </div>

      <section ref={footerRef} className="footer scroll-reveal">
        <div className="footer-container">
          <div className="footer-block location">
            <h3>üìç V·ªã tr√≠</h3>
            <p>Trung t√¢m Hi·∫øn m√°u, ƒê·∫°i h·ªçc FPT, Q9, TP.HCM</p>
          </div>
          <div className="footer-block hotline">
            <h3>üìû Hotline</h3>
            <p>+84 123 456 789</p>
            <p>+84 123 456 987</p>
          </div>
          <div className="footer-block social-media">
            <h3>üåê Theo d√µi ch√∫ng t√¥i</h3>
            <ul>
              <li><a href="https://facebook.com" target="_blank" rel="noreferrer">Facebook</a></li>
              <li><a href="https://instagram.com" target="_blank" rel="noreferrer">Instagram</a></li>
              <li><a href="https://twitter.com" target="_blank" rel="noreferrer">Twitter</a></li>
            </ul>
          </div>
        </div>
        <p className="footer-copy">¬© 2025 HopeDonor. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
      </section>
    </>
  );
}