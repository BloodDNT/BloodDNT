const express = require("express");
const router = express.Router();
const { Op } = require("sequelize");
const authenticate = require("../middlewares/authenticateToken");
const Blog = require("../models/Blog");
const User = require("../models/User");
const BlogLike = require("../models/BlogLike");
const BlogComment = require("../models/BlogComment");
const BlogReport = require("../models/BlogReport");

// ‚úÖ GET t·∫•t c·∫£ b√†i vi·∫øt
router.get("/", async (req, res) => {
  try {
    const posts = await Blog.findAll({
      include: [{ model: User, as: "Author", attributes: ["FullName", "Role"] }],
      order: [["LastUpdated", "DESC"]],
    });

      const postsWithDetails = await Promise.all(
        posts.map(async (post) => {
          const likeCount = await BlogLike.count({ where: { IDPost: post.IDPost } });
          const commentCount = await BlogComment.count({ where: { IDPost: post.IDPost } });

          const previewComments = await BlogComment.findAll({
            where: { IDPost: post.IDPost },
            include: [{ model: User, attributes: ["FullName"] }],
            order: [["CommentedAt", "ASC"]],
            limit: 3,
          });

          return {
            ...post.toJSON(),
            Author: post.Author ? (post.Author.Role === "Admin" ? "Admin" : post.Author.FullName) : "Kh√¥ng x√°c ƒë·ªãnh",
            likeCount,
            commentCount,
            previewComments,
          };
        })
      );

    res.json(postsWithDetails);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// ‚úÖ POST: ƒêƒÉng b√†i vi·∫øt
router.post("/", authenticate, async (req, res) => {
  if (req.user.Role !== "Admin") {
    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng b√†i vi·∫øt." });
  }

  const { Title, Content } = req.body;
  if (!Title || !Content) {
    return res.status(400).json({ message: "Thi·∫øu ti√™u ƒë·ªÅ ho·∫∑c n·ªôi dung" });
  }

  try {
    const post = await Blog.create({
      Title,
      Content,
      IDUser: req.user.IDUser,
      LastUpdated: new Date(),
    });
    res.status(201).json({ message: "ƒêƒÉng b√†i th√†nh c√¥ng", post });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng b√†i", error: err.message });
  }
});

// ‚úÖ PUT: C·∫≠p nh·∫≠t b√†i vi·∫øt
router.put("/:id", authenticate, async (req, res) => {
  const { id } = req.params;
  const { title, content } = req.body;

  try {
    const post = await Blog.findByPk(id);
    if (!post) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    if (post.IDUser !== req.user.IDUser && req.user.Role !== "Admin") {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn s·ª≠a b√†i vi·∫øt n√†y" });
    }

    await post.update({ Title: title, Content: content, LastUpdated: new Date() });

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng", post });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t", error: err.message });
  }
});

// ‚úÖ DELETE: Xo√° b√†i vi·∫øt
router.delete("/:id", authenticate, async (req, res) => {
  const { id } = req.params;

  try {
    const post = await Blog.findByPk(id);
    if (!post) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    if (Number(post.IDUser) !== Number(req.user.IDUser) && req.user.Role !== "Admin") {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn xo√° b√†i vi·∫øt n√†y" });
    }

    await post.destroy();
    res.status(200).json({ message: "‚úÖ Xo√° b√†i vi·∫øt th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi xo√°", error: err.message });
  }
});

// ‚úÖ L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n cho 1 b√†i vi·∫øt
router.get("/:id/comments", async (req, res) => {
  try {
    const IDPost = req.params.id;

    const comments = await BlogComment.findAll({
      where: { IDPost },
      include: [{ model: User, attributes: ["FullName"] }],
      order: [["CommentedAt", "ASC"]],
    });

    res.json(comments);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// ‚úÖ B√¨nh lu·∫≠n b√†i vi·∫øt
router.post("/:id/comment", authenticate, async (req, res) => {
  try {
    const IDPost = req.params.id;
    const IDUser = req.user.IDUser;
    const { content } = req.body;

    if (!content) return res.status(400).json({ message: "N·ªôi dung b√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

    const comment = await BlogComment.create({ IDPost, IDUser, Content: content });

    res.json({ message: "ƒê√£ b√¨nh lu·∫≠n", comment });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// ‚úÖ Like b√†i vi·∫øt
router.post("/:id/like", authenticate, async (req, res) => {
  try {
    const IDPost = req.params.id;
    const IDUser = req.user.IDUser;

    const existed = await BlogLike.findOne({ where: { IDPost, IDUser } });
    if (existed) {
      return res.status(400).json({ message: "B·∫°n ƒë√£ th√≠ch b√†i n√†y r·ªìi" });
    }

    await BlogLike.create({ IDPost, IDUser });
    res.json({ message: "ƒê√£ th√≠ch b√†i vi·∫øt" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// ‚úÖ B√°o c√°o b√†i vi·∫øt

router.post("/report", authenticate, async (req, res) => {
try {
    console.log(req.body); // üü¢ ƒê·∫∑t ·ªü ƒë√¢y ƒë·ªÉ xem d·ªØ li·ªáu g·ª≠i l√™n

    const { IDPost, IDReporter, Reason } = req.body;
if (!IDPost || !IDReporter || !Reason) {
  return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b√°o c√°o' });
}
    const newReport = await BlogReport.create({
      IDPost,
      IDReporter,
      Reason
    });
console.log('üü¢ newReport:', newReport.toJSON());
const reports = await BlogReport.findAll();
console.log('T·∫•t c·∫£ b√°o c√°o:', reports.map(r => r.toJSON()));
    res.status(201).json({ message: 'G·ª≠i b√°o c√°o th√†nh c√¥ng' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'L·ªói server', details: error.message });
  }
});


module.exports = router;
